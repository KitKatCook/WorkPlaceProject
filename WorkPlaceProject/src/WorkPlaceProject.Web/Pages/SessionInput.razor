@page "/sessionInput"
<PageTitle>Planning Poker</PageTitle>
@inject NavigationManager UriHelper
@using Microsoft.Identity.Web
@using Microsoft.Graph
@using WorkPlaceProject.Application;
@using WorkPlaceProject.Application.StoryPointer;
@using WorkPlaceProject.Application.StoryPointerSession;
@using WorkPlaceProject.Application.SessionUser;
@using WorkPlaceProject.Domain.StoryPointerSession;

@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

@inject IPointerSessionApplicationService PointerSessionApplicationService
@inject ISessionUserApplicationService SessionUserApplicationService

<h1>Planning Poker</h1>

<div class="float-container">
    <div class="float-child">
        <div class="form-group">
            <h2>Join Session</h2>
            <div class="form-row">
                <label>
                    Username:
                </label>
                <input class="form-input" @bind="_userName" size="50" disabled />
            </div>
            <div class="form-row">
                <label>
                    Session Code:
                </label>
                <input class="form-input" style="color: black" @bind="_sessionCode" size="50" />
            </div>
            <div class="form-row">
                <label>
                    <button class="form-large-button" @onclick="JoinSession">Join</button>
                </label>
            </div>
    </div>
    </div>
    <div class="float-child">
        <div class="form-group">
            <h2>Host Session</h2>
            <div class="form-row">
                <label>
                    Username:
                </label>
                <input class="form-input" @bind="_userName" size="50" disabled />
            </div>
            <div class="form-row">
                <label>
                    Generate Code:
                </label>
                <button class="form-button" @onclick="GenerateSessionCode">Generate</button>
            </div>
            <div class="form-row">
                <label>
                    SessionCode:
                </label>
                <input class="form-input" @bind="_generatedSessionCode" size="50" disabled />
            </div>
            <div class="form-row">
                <button class="form-large-button" @onclick="HostSession">Host</button>
            </div>
        </div>
    </div>
</div>

<h1>@_error</h1>

@code 
{
    User user;
    string? _sessionCode;
    string? _generatedSessionCode;
    string? _userName;

    string? _error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
            _userName = user.GivenName;
        }
        catch (Exception ex)
        {
            _error = "GraphServiceClient error";
            ConsentHandler.HandleException(ex);
        }
    }

    private void JoinSession()
    {
        if (SessionExists(_sessionCode)
            && UserExists())
        {
            PointerSession? session = PointerSessionApplicationService.GetPointerSessionByCode(_sessionCode);

            if (session is null)
            {
                _error = $"Session does not exist for code=[{_sessionCode}].";
                return;
            }

            _ = SessionUserApplicationService.CreateSessionUser(
                new SessionUserAdto()
                    {
                        Id = Guid.NewGuid(),
                        AzureId = Guid.Parse(user!.Id),
                        SessionId = session.Id,
                        IsSessionLeader = false
                    }
                );

            UriHelper.NavigateTo($"storyPointerApp/{_sessionCode}/{_userName}");
        }
    }

    private void HostSession()
    {
        if (SessionExists(_generatedSessionCode)
            && UserExists())
        {

            PointerSession? session = PointerSessionApplicationService.GetPointerSessionByCode(_generatedSessionCode);

            if (session is not null)
            {
                _error = "Session already exists";
                return;
            }

            Guid sessionId = Guid.NewGuid();

            _ = PointerSessionApplicationService.CreatePointerSession(
                new PointerSessionAdto()
                    {
                        Id = sessionId,
                        SessionLeaderId = Guid.Parse(user!.Id),
                        SessionCode = _generatedSessionCode
                    }
                );

            _ = SessionUserApplicationService.CreateSessionUser(
                new SessionUserAdto()
                    {
                        Id = sessionId,
                        AzureId = Guid.Parse(user!.Id),
                        IsSessionLeader = true
                    }
                );

            var getResult = PointerSessionApplicationService.GetPointerSessionById(sessionId);

            UriHelper.NavigateTo($"storyPointerApp/{_generatedSessionCode}/{_userName}");
        }
        else
        {
            _error = "Please generate a session code to host a session. The code should be 8 characters/numbers long.";
        }
    }

    private async Task GenerateSessionCode()
    {
        _generatedSessionCode = await Task.FromResult(SessionCodeGenerator.Generate());
    }

    private bool SessionExists(string sessionCode)
    {
        if (SessionCodeGenerator.Validate(sessionCode)) 
        {
            return true;
        }
        else
        {
            _error = "Session code validation error";
            return false;
        }
    }

    private bool UserExists()
    {
        if (_userName is not null)
        {
            return true;
        }

        _error = "User code validation error";
        return false;
    }
}
