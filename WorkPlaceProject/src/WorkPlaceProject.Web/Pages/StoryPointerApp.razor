@page "/storyPointerApp/{sessionCode}/{userCode}"
@using Microsoft.AspNetCore.SignalR.Client
@using WorkPlaceProject.Application;
@using WorkPlaceProject.Application.SessionUser;
@using WorkPlaceProject.Application.StoryPointer;
@using WorkPlaceProject.Application.StoryPointerSession;
@using WorkPlaceProject.Domain.SessionUser;
@using WorkPlaceProject.Domain.StoryPointer.ValueTypes
@inject NavigationManager Navigation
@implements IAsyncDisposable

@using Microsoft.Identity.Web
@using Microsoft.Graph
@using WorkPlaceProject.Domain.StoryPointer;
@using WorkPlaceProject.Domain.StoryPointerSession;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

@inject IStoryPointSelectionApplicationService StoryPointSelectionApplicationService
@inject IPointerSessionApplicationService PointerSessionApplicationService
@inject ISessionUserApplicationService SessionUserApplicationService

<PageTitle>Story Pointer</PageTitle>
<h3>Story Pointer</h3>

@if (isSessionLeader)
{
    <h3>Session: @SessionCode</h3>
}
<hr>

<AuthorizeView>
    <Authorized>
        
        <section>
            <article>
                <div class="form-group">
                    <label>
                        Messages:
                    </label>
                </div>
                <ul id="messagesList">
                    @foreach (var message in _messages)
                    {
                        <li>@message</li>
                    }
                </ul>
            </article>
        </section>

        <section>
            <article>
                <div class="form-group">
                    <label>
                        Selected Values:
                    </label>
                </div>
                <div class="row">

                    @foreach (var card in StoryPointSelections.OrderBy(x => x.Username))
                    {
                        <div class="column">
                            <div class="card">

                                @if (showResults)
                                {
                                    <h3>@card.Value</h3>
                                    <h3>@card.Description</h3>
                                }
                                <h3>@card.Username</h3>
                            </div>
                        </div>
                    }
                </div>
            </article>
            @if (isSessionLeader)
            {
                <div class="form-group">
                        @if (showResults)
                        {
                            <button class="form-button" @onclick="(e => HideStoryPointValues())" disabled="@(!IsConnected)">Hide Story Points</button>
                        }
                        else
                        {
                            <button class="form-button" @onclick="(e => RevealStoryPointValues())" disabled="@(!IsConnected)">Reveal Story Points</button>
                        }

                </div>
            }
        </section>

        <section>
            <article>
                <div class="form-group">
                    <label>
                        Story Point Cards:
                    </label>
                </div>
                <div class="row">

                    @foreach (var card in FibonacciValueType.Values)
                    {
                        <div class="column">
                            <div class="card" @onclick="(e => SendStoryPoints(card.Value.ToString()))">
                                <h3>@card.Value</h3>
                                <h3>@card.Description</h3>
                            </div>
                        </div>
                    }
                </div>
            </article>
        </section>

        <section>
            <div class="form-group">
                <label>
                    Message:
                    <input @bind="_messageInput" size="50" />
                </label>
                <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
            </div>
       </section>

        <h1>@_error</h1>

    </Authorized>
    <NotAuthorized>
        ahhhhhhhh
    </NotAuthorized>
</AuthorizeView>

@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();
    private IEnumerable<UserValueType> StoryPointSelections = new List<UserValueType>();
    private User? user;
    private bool showResults = false;
    private bool isSessionLeader = false;

    [Parameter]
    public string? SessionCode { get; set; }

    [Parameter]
    public string? UserCode { get; set; }

    private string? _messageInput;
    private string? selectedValue;
    private string? _error;

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();

            SessionUser? sessionuser = SessionUserApplicationService.GetSessionUserById(Guid.Parse(user.Id));

            if (sessionuser is not null)
            {
                isSessionLeader = sessionuser.IsSessionLeader;

                IEnumerable<StoryPointSelection> results = StoryPointSelectionApplicationService.GetStoryPointSelectionBySessionId(sessionuser.SessionId);
                if (results is not null)
                {
                    StoryPointSelections = results.Select(x => new UserValueType(0, x.SelectionValue, "", x.Username));
                }
            }


        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/StoryPointerHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveUserMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);

        });

        _hubConnection.On<string>("ReceiveInfoMessage", ( message) =>
        {
            var encodedMsg = $"{message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Guid, string> ("ReceiveStoryPointValueUpdated", (sessionId, session) =>
        {
            GetUsersStoryPointValues(sessionId);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("RevealStoryPointValues", (SessionCode) =>
        {
            showResults = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("HideStoryPointValues", (SessionCode) =>
        {
            showResults = false;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("AddToGroup", SessionCode, UserCode);

    }

    private async Task Send()
    {
        if (_messageInput is null || _messageInput.Length < 1)
        {
            // add an error
            return;
        }

        if (_hubConnection is not null && SessionCode is not null)
        {
            await _hubConnection.SendAsync("SendGroupMessage", SessionCode, UserCode, _messageInput);
            _messageInput = "";
        }
        else if(_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendMessage", UserCode, _messageInput);
            _messageInput = "";
        }
    }

    private async Task SendStoryPoints(string storyPoints)
    {

        PointerSession? session = PointerSessionApplicationService.GetPointerSessionByCode(SessionCode);

        if (session is null)
        {
            _error = $"Session does not exist for code=[{SessionCode}].";
            return;
        }

        Guid storyPointSelectionId = Guid.NewGuid();

        bool result = StoryPointSelectionApplicationService.CreateStoryPointSelection(
            new StoryPointSelectionAdto()
                {
                    Id = storyPointSelectionId,
                    SessionId = session.Id,
                    UserId = Guid.Parse(user.Id),
                    Username = user.GivenName,
                    SelectionValue = storyPoints
                }
        );

        var getResult = StoryPointSelectionApplicationService.GetStoryPointSelectionById(storyPointSelectionId);

        selectedValue = storyPoints;
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("StoryPointValueUpdated", session.Id, SessionCode);
        }

    }

    private void GetUsersStoryPointValues(Guid sessionId)
    {
        var results = StoryPointSelectionApplicationService.GetStoryPointSelectionBySessionId(sessionId);
        StoryPointSelections = results.Select(x => new UserValueType(0, x.SelectionValue, "", x.Username));
    }

    private async Task RevealStoryPointValues()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("RevealUserStoryPointValues", SessionCode);
        }
    }

    private async Task HideStoryPointValues()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("HideUserStoryPointValues", SessionCode);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}